/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        ListNode newlist = null;
        ListNode n1 = l1;
        ListNode n2 = l2;
        ListNode n = null;
        if(l1 == null && l2 == null)
            return null;
        
        if(l1 == null && l2 != null)
            return l2;
        
        if(l1 != null && l2 == null)
            return l1;
        
        if(n1.val < n2.val)
        {
            ListNode cur = new ListNode(n1.val);
            newlist = cur;
            n1 = n1.next;
        }
        else
        {
            ListNode cur = new ListNode(n2.val);
            newlist = cur;
            n2 = n2.next;
        }
        n = newlist;
        while(n1!=null && n2!=null)
        {
            if(n1.val < n2.val)
            {
                ListNode cur = new ListNode(n1.val);
                n.next = cur;
                n = n.next;
                n1 = n1.next;
            }
            else
            {
                ListNode cur = new ListNode(n2.val);
                n.next = cur;
                n = n.next;
                n2 = n2.next;
            }  
        }
        if(n1 == null)
        {
            n.next = n2;
        }
        else
        {
            n.next = n1;
        }
        return newlist;
    }
}
